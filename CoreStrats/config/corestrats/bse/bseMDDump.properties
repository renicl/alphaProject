# PROPERTIES
# BSE Instrument Dump
# subscribe to all channels in the BSE config.xml and dump all instruments to log file

app.name=BSE_InstDump
app.timeZone=IST
app.debug=false
app.genIdPrefix=C
app.genNumIdPrefix=12
app.REC=2

admin.port=8300

# expectedOrders is used to presize pools and calculate size of persistence files page sizes
run.cpuMaskFile=${ALGO_CPU_MASKS}
run.warmUpCount=${WARMCOUNT}
run.forceRemovePersistence=false
run.maxLogSize=1000000000
run.warmUpPortOffset=20
run.minLogFlushSecs=${LOG_FLUSH_SECS}
run.mainPriority=Main

warmup.delay=${WARMDELAY}


# =================================================================================
# DEFAULT PROPERTIES

queue.default.enableSendSpinLock=${run.enableSendSpinLock}

queue.mdIn.default.defaultProperties=queue.default
queue.mdIn.default.type=${MD_IN_QUEUE_TYPE}
queue.mdIn.default.queuePresize=${MD_IN_RING_BUFFER_DEFAULT_QUEUE_SIZE}


# SESSION INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.default.disableNanoStats=false
session.default.logEvents=true
session.default.logStats=true
session.default.logPojoEvents=${run.logPojoEvents}
session.default.persistThreadPriority=MemMapAllocator
session.default.dummyPersister=true
session.default.disableNanoStats=false
session.default.persistThreadPriority=MemMapAllocator
session.default.trace=${run.sessionTrace}

session.up.default.defaultProperties=session.default
session.up.default.trace=true
session.up.default.logEvents=true
session.up.default.logPojoEvents=true
session.up.default.codecId=MDBSE
session.up.default.rec=BO

session.down.default.defaultProperties=session.default

# SESSION SOCKET INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.socket.default.localPort=0
session.socket.default.soDelayMS=0
session.socket.default.useNIO=${run.useNIO}

session.socket.up.default.defaultProperties=session.socket.default
session.socket.up.default.server=false

session.socket.down.default.defaultProperties=session.socket.default
session.socket.down.default.server=false
session.socket.down.default.isRecoverFromLoginSeqNumTooLow=true
session.socket.down.default.heartBeatIntSecs=${EXCHANGE_HEARTBEAT_SECS}

# =================================================================================
# COMPONENTS

component.appProps.loader=com.rr.om.loaders.OMPropertiesLoader

component.exchangeManager.loader=com.rr.om.loaders.ExchangeManagerLoader
component.exchangeManager.properties.genNumIdPrefix=${app.genNumIdPrefix}
component.exchangeManager.properties.fileName=${run.exchangeXML}

component.instrumentLocator.loader=com.rr.om.loaders.FixInstrumentFileStoreLoader
component.instrumentLocator.properties.file=${inst.file}
component.instrumentLocator.properties.threadsafe=false
component.instrumentLocator.properties.rec=${app.REC}
component.instrumentLocator.properties.type=singleExchange

component.sessionManager.className=com.rr.om.session.SessionManager

component.codecFactory.loader=com.rr.om.loaders.CodecFactoryLoader

###############
# GUI MODELS #
###############

component.execTableModel.className=com.rr.core.algo.mdadapters.ExecTableModel
component.orderTableModel.className=com.rr.core.algo.mdadapters.OrderTableModel
component.orderTableModel.arg.1.ref=execTableModel

###################
# Trading Session #
###################

component.inboundMktRouter.className=com.rr.core.session.PassThruRouter
component.inboundMktRouter.arg.1.type=com.rr.core.model.MessageHandler
component.inboundMktRouter.arg.1.ref=orderTableModel

include ./config/corestrats/bse/parts/bseETISession.properties

# ---------------------------------------------------------------------------------

###################
# MD Controller 1 #
###################

# MarketDataController 
# market data events placed in market data controller queue
# queue is read and events invoked on the market data controller by its inbound dispatcher (which will be async on its own thread)
component.mdCtlInQueue1.loader=com.rr.om.loaders.QueueLoader
component.mdCtlInQueue1.properties.defaultProperties=queue.mdIn.default

component.mdInDispatcher1.className=com.rr.core.dispatch.ThreadedDispatcher
component.mdInDispatcher1.arg.1.type=com.rr.core.collections.MessageQueue
component.mdInDispatcher1.arg.1.value=mdCtlInQueue1
component.mdInDispatcher1.arg.2.type=com.rr.core.utils.ThreadPriority
component.mdInDispatcher1.arg.2.value=Controller1

#component.bookConsumer.className=com.rr.core.algo.mdadapters.DebugBookChangeConsumer
component.bookConsumer.className=com.rr.core.algo.mdadapters.BooksTableModel

component.mdController1.loader=com.rr.core.algo.loaders.BSEMarketDataControllerLoader
component.mdController1.properties.pipeIdList=P1
component.mdController1.properties.bookLevels=5
component.mdController1.properties.inboundDispatcher=mdInDispatcher1
component.mdController1.properties.instrumentStore=instrumentLocator
component.mdController1.properties.rec=${app.REC}
component.mdController1.properties.overrideSubscribeSet=true
component.mdController1.properties.bookListener=bookConsumer
component.mdController1.properties.debug=${CONTROLLER_TRACE}
   # RECOVERY PROPERTIES
   # if enqueueIncUpdatesOnGap is true then when product message sequence gap detected enqueue out of sequence packets and wait for in sequence recovery
component.mdController1.properties.enqueueIncUpdatesOnGap=true
component.mdController1.properties.maxEnqueueIncUpdatesOnGap=30
   # disableDirtyAllBooksOnPacketGap if true will disable the mark books dirty when packet gap detected
component.mdController1.properties.disableDirtyAllBooksOnPacketGap=true
   # ignoreDirtyOnGap if true will not mark book dirty when gap detected
component.mdController1.properties.ignoreDirtyOnGap=false



###############
# MD SESSIONS #
###############

component.inboundMDRouter.className=com.rr.core.session.PassThruRouter
component.inboundMDRouter.arg.1.type=com.rr.core.model.MessageHandler
component.inboundMDRouter.arg.1.ref=mdController1

include ./config/corestrats/bse/bseMDSess.properties

# ---------------------------------------------------------------------------------

component.guiOrderTicket.className=com.rr.core.algo.mdadapters.JPanelOrderTicket
component.guiOrderTicket.arg.1.type=com.rr.core.model.MessageHandler
component.guiOrderTicket.arg.1.ref=exchangeSession1
component.guiOrderTicket.arg.2.ref=orderTableModel

component.guiBlotter.className=com.rr.core.algo.mdadapters.JPanelBlotterGUI
component.guiBlotter.arg.1.type=com.rr.core.model.MessageHandler
component.guiBlotter.arg.1.ref=exchangeSession1
component.guiBlotter.arg.2.ref=bookConsumer
component.guiBlotter.arg.3.ref=orderTableModel
component.guiBlotter.arg.4.ref=execTableModel
component.guiBlotter.arg.5.ref=guiOrderTicket


# ---------------------------------------------------------------------------------
# SHARED CONTEXT
# Last component due to reference requirements
component.appContext.className=com.rr.core.algo.strats.StratContext
component.appContext.properties.appProps=appProps
component.appContext.properties.exchangeManager=exchangeManager
component.appContext.properties.instrumentLocator=instrumentLocator



