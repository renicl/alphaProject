/*******************************************************************************
 * Copyright (c) 2015 Low Latency Trading Limited  :  Author Richard Rose
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at	http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,  software distributed under the License 
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 *******************************************************************************/
package com.rr.md.asia.bse.reader;

import com.rr.core.lang.BaseTestCase;
import com.rr.core.lang.ReusableString;
import com.rr.core.lang.TimeZoneCalculator;
import com.rr.core.log.Logger;
import com.rr.core.log.LoggerFactory;
import com.rr.core.model.Message;
import com.rr.core.utils.HexUtils;
import com.rr.md.asia.bse.fastfix.BSEPacketHeader;
import com.rr.md.asia.bse.fastfix.reader.BSEFastFixDecoder;


public class BSEFailedDecodeTest extends BaseTestCase {

    private static final Logger       _log = LoggerFactory.console( BSEFailedDecodeTest.class );

    private static final String SNAP_NO_HDR1 = "5A F0 DD D2 5A 69 CE 85 3D 0E B4 80 80 13 49 10 41 5B 3B 58 62 B8 84 E0 82 80 83 86 81 01 81 FC 01 68 CF 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 18 E0 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 EA 80 80 80 80 80 08 90 5A 69 CE 82 80 84 E0 82 80 83 86 81 01 81 FE 7D 80 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE 01 7B E2 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 84 7E 04 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 FF 03 A9 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FF 17 D7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 66 BA 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 92 80 80 80 80 80 08 90 5A 69 CE 82 80 84 E0 82 80 83 86 81 01 81 FE 7C BA 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE E8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FF 1C DC 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 63 89 80 80 80 80 80 F0 83 80 80 80 80 80 80 FF 03 EC 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE 01 16 EF 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 66 83 80 80 80 80 80 F0 83 80 80 80 80 80 80 82 7F A7 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FD FE 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 81 01 AE 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 7E AE 80 80 80 80 80 F0 83 80 80 80 80 80 80 FF 02 A4 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 81 C7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7F 9A 80 80 80 80 80 F0 83 80 80 80 80 80 80 82 7F 90 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FD F7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE E8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE 01 54 DA 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 84 7E 2B 85 80 80 80 80 80 F0 83 80 80 80 80 80 80 FF 02 E6 80 80 80 80 80 08 90 5A 69 CE 81 80 87 E4 82 80 83 86 81 82 FE 37 8B 82 80 13 49 10 1E 4F 5F 30 6C 91 01 86 FF 27 3C 59 F3 93 B4 80 80 80 80 80 87 83 46 D2 80 80 80 80 80 80 B0 80 80 80 80 80 89 FE 36 D0 80 80 80 80 80 B0 80 80 80 80 80 01 81 81 17 86 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 32 8D 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 D2 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE 7F 91 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 81 00 CB 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 7F 8B 80 80 80 80 80 F0 83 80 80 80 80 80 80 FF 01 A1 80 80 80 80 80 08 90 5A 69 CE 81 80 84 E0 82 80 83 86 81 01 81 FE 7E F1 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 83 98 80 80 80 80 80";
    private static final String INC_NO_HDR2 = "F8 DE 51 43 C4 D2 81 CD FE 82 80 01 00 00 00 10 00 00 00 92 FF 86 80 80 82 81 81 13 49 11 4D 4B 5C 6A 13 91 90 01 00 00 00 10 00 00 00 93 81 80 80 80 82 90 01 00 00 00 10 00 00 01 B1 81 80 80 80 82 90 01 00 00 00 10 00 00 00 94 81 80 80 80 82 90 01 00 00 00 10 00 00 01 B2 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 00 95 FF FC 80 80 84 A0 81 81 B7 80 80 84 F0 82 80 01 00 00 00 10 00 00 01 B3 82 CD 80 80 82 90 01 00 00 00 10 00 00 01 B4 81 80 80 80 82 90 01 00 00 00 10 00 00 01 B5 81 80 80 80 82 90 01 00 00 00 10 00 00 01 B6 81 80 80 80 82 90 01 00 00 00 10 00 00 01 B7 81 83 80 80 82 D0 83 01 00 00 00 10 00 00 01 B8 81 F8 80 80 83 D0 82 01 00 00 00 10 00 00 01 B9 81 83 80 80 82 D0 83 01 00 00 00 10 00 00 01 BA FF FE 80 80 84 A0 81 82 84 80 80 84 F0 82 80 01 00 00 00 10 00 00 01 BB 81 80 80 80 82 90 01 00 00 00 10 00 00 01 BC 81 80 80 80 82 90 01 00 00 00 10 00 00 01 BD 81 80 80 80 82 90 01 00 00 00 10 00 00 01 BE 81 80 80 80 82 90 01 00 00 00 10 00 00 01 BF 81 80 80 80 82 90 01 00 00 00 10 00 00 01 C0 81 80 80 80 82 90 01 00 00 00 10 00 00 01 C1 81 83 80 80 82 90 01 00 00 00 10 00 00 01 C2 81 80 80 80 82 90 01 00 00 00 10 00 00 01 C3 81 FD 80 80 82 90 01 00 00 00 10 00 00 01 C4 81 FE 80 80 82 D0 83 01 00 00 00 10 00 00 01 C5 FF FE 80 80 84 A0 81 81 B8 80 80 83 B0 80 01 00 00 00 10 00 00 00 F8 FF 02 A9 80 80 8B A0 81 81 01 8C 80 80 8B F0 82 80 01 00 00 00 10 00 00 01 82 83 7C 97 80 80 82 D0 83 01 00 00 00 10 00 00 01 83 FE 02 8D 80 80 8B A0 81 82 7E 99 80 80 8B F0 82 80 01 00 00 00 10 00 00 01 8C 82 DA 80 80 82 90 01 00 00 00 10 00 00 01 8D 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 01 8E FE 02 A1 80 80 8B A0 81 81 02 98 80 80 8B F0 82 80 01 00 00 00 10 00 00 00 C5 83 7B C7 80 80 82 90 01 00 00 00 10 00 00 00 C6 81 80 80 80 82 90 01 00 00 00 10 00 00 01 96 81 80 80 80 82 90 01 00 00 00 10 00 00 00 C7 81 80 80 80 82 90 01 00 00 00 10 00 00 01 97 81 80 80 80 82 90 01 00 00 00 10 00 00 00 C8 81 80 80 80 82 90 01 00 00 00 10 00 00 01 98 81 80 80 80 82 90 01 00 00 00 10 00 00 00 C9 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 01 99 FD 11 AB 80 80 8B A0 81 82 72 F0 80 80 8B F0 82 80 01 00 00 00 10 00 00 00 CA 83 7B E5 80 80 82 D0 83 01 00 00 00 10 00 00 00 CB 81 FB 80 80 84 90 01 00 00 00 10 00 00 00 CC FF 81 80 80 85 A0 81 82 87 80 80 84 F0 82 80 01 00 00 00 10 00 00 01 A0 81 FD 80 80 82 90 01 00 00 00 10 00 00 01 A1 81 80 80 80 82 90 01 00 00 00 10 00 00 01 A2 81 80 80 80 82 90 01 00 00 00 10 00 00 00 85 81 80 80 80 82 90 01 00 00 00 10 00 00 01 A3 81 80 80 80 82 90 01 00 00 00 10 00 00 00 86 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 01 A4 FD 12 F3 80 80 8B A0 81 83 6D BE 80 80 8B F0 82 80 01 00 00 00 10 00 00 00 87 82 CF 80 80 82 90 01 00 00 00 10 00 00 00 88 81 80 80 80 82 90 01 00 00 00 10 00 00 00 89 81 80 80 80 82 90 01 00 00 00 10 00 00 01 A7 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 00 8A FE B1 80 80 8B A0 81 83 CF 80 80 8A F0 82 80 01 00 00 00 10 00 00 01 A8 81 80 80 80 82 90 01 00 00 00 10 00 00 01 A9 81 80 80 80 82 90 01 00 00 00 10 00 00 01 AA 81 80 80 80 82 90 01 00 00 00 10 00 00 01 AB 81 80 80 80 82 90 01 00 00 00 10 00 00 01 AC 81 80 80 80 82 90 01 00 00 00 10 00 00 00 8F 81 80 80 80 82 D0 83 01 00 00 00 10 00 00 01 AD 81 FB 80 80 84 D0 82 01 00 00 00 10 00 00 00 90 81 85 80 80 82 D0 83 01 00 00 00 10 00 00 01 AE 81 FB 80 80 83 D0 82 01 00 00 00 10 00 00 00 91 81 85 80 80 82 D0 83 01 00 00 00 10 00 00 01 AF FF FC 80 80 84 A0 81 82 87 80 80 84";

    private static final String EMDS1  = "C0 F0 81 F8 84 00 05 E8 F8 88 13 93 1E B5 FE EA 3C 5D 84 00 00 00 00 C0 F8 5A F0 DD F8 01 2E CE 84 01 00 00 00 40 00 00 01 A9 80 80 13 49 44 71 3E 6A 48 1D A8 84 C0 82 80 82 84 01 81 FE 02 AB 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7D 9C 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 01 45 B4 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 39 DA 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 01 9A 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7D F4 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 00 F2 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7E 9C 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 00 64 92 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 1A E0 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 00 40 E2 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 3D F4 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 20 DE 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 5D F8 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 82 80 84 C0 82 80 82 84 01 81 81 02 D8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7C 9A 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FF 1D CC 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 61 C2 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 02 0E 88 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7D 71 86 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FF 17 84 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 68 8A 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 01 49 A8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 35 E6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 01 2A 88 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 55 86 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 00 F7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7D FB 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 AE 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7E A8 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 82 7F B4 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 FF 7F A2 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 24 A0 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 5A B6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 AA 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FF 24 8C 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 5A E6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 02 F1 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7C 9D 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80";
    private static final String EMDI2  = "C0 F0 81 F8 84 00 1A D2 D7 88 13 93 1E B6 09 74 2B BB 84 00 47 32 C8 C0 F8 F8 DE 02 1D B2 F8 82 82 FE 81 80 3D 06 CB FC 30 0F 97 82 82 82 98 9D 13 49 47 56 60 49 35 7E B9 80 82 54 58 DC 8C 82 83";
    private static final String EMDS3  = "C0 F0 81 F8 84 00 05 E8 F7 88 13 93 1E B5 FB 50 A0 9E 84 00 00 00 00 C0 F8 5A F0 DD F8 01 2E CE 84 01 00 00 00 40 00 00 00 F8 01 E1 01 C8 13 49 45 3F 4C 2D 4C 12 E0 86 C0 82 80 82 84 01 81 FD 03 BD 80 80 80 80 80 FC 80 80 80 80 80 80 80 FF 15 DC 9A 82 82 13 49 45 3F 4C 2D 4C 12 E1 80 80 80 B4 80 80 80 80 80 80 81 6E B6 01 B0 81 13 49 44 7C 66 20 74 3D 89 80 80 80 FC 81 80 80 80 80 80 80 83 78 E5 81 81 82 13 49 44 7D 0F 2E 53 5B 91 80 80 80 FC 84 80 80 80 80 80 80 81 7F 93 80 80 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 F0 01 2E CE 8A 80 80 7F 31 72 3C 7C 0A C8 84 C0 82 80 82 84 01 81 FE 00 40 9A 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 3E F4 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 1D B8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 61 D6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 89 80 84 C0 82 80 82 84 01 81 FF 09 CC 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 75 C2 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 9B 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7E F3 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 23 A6 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 5B E8 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 88 80 84 C0 82 80 82 84 01 81 FE 01 04 FA 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 7A 94 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 00 62 98 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 1C F6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 9F 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7E EF 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 20 C8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 5E C6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 87 80 84 C0 82 80 82 84 01 81 FE 01 24 9A 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 5A F4 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 01 01 B8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 7D D6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 81 00 C7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7E C7 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 3F E8 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7F 3F A6 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 82 CB 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 FF C3 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 83 80 84 C0 82 80 82 84 01 81 FE 02 29 E6 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7D 55 A8 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80 08 90 01 2E CE 81 80 84 C0 82 80 82 84 01 81 FE 02 07 84 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7D 78 8A 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 00 F2 80 80 80 80 80";
    private static final String EMDS4  = "C0 F0 81 F8 84 00 05 E8 F4 88 13 93 1E B5 EF EE D3 63 84 00 00 00 00 C0 F8 5A F0 DD F8 05 3F E0 83 01 00 00 00 30 00 00 01 BA 80 80 13 49 44 71 3E 6A 48 05 F0 84 C0 82 80 82 84 01 81 FC 38 B9 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 46 B3 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FF 36 E9 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 47 A1 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 81 04 BD 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 79 FF 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 03 5A B7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7C 24 85 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 03 20 9D 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7C 5E 9F 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 02 6B 8D 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7D 13 AF 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 81 02 B0 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7C 8C 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 01 C4 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 02 05 93 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7D 78 F7 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FF 13 C1 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 82 6A 97 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 01 1B D7 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 7E 62 81 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 81 F3 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 81 7D E5 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80 08 90 05 3F E0 81 80 84 C0 82 80 82 84 01 81 FE 2F EF 80 80 80 80 80 F0 85 80 80 80 80 80 80 80 80 80 80 80 80 F0 84 80 80 80 80 80 80 83 4D E9 80 80 80 80 80 F0 83 80 80 80 80 80 80 81 02 A8 80 80 80 80 80";
    private static final String EMDI3  = "C0 F0 81 9E 84 00 00 00 07 88 13 96 6A B9 60 40 7E 15 84 00 0C B7 54 C0 F8 FE E3 82 9E 81 80 80 13 4B 1A 57 16 01 50 01 C0";

    private static final String EMDI1  = "C0 F0 81 9E 84 00 00 0C C9 88 13 96 6D 99 AB 67 77 50 84 80 00 00 00 C0 F8 FC E1 84 9E 8B 81 80 81 13 4B 1B 33 1A 5B 0C 5D A8 C6 E3 80 81 13 4B 1B 33 1A 5B 0C 5D A8";

    // [350117 / 0] [s#1] [p#130837] [t#120]  
    private static final String I_EQ1  = "C0 F0 81 CB 84 00 05 57 A5 88 13 A5 30 9F 3B 83 77 3C 84 00 01 FF 15 C0 F8 F8 DE 11 D6 CB 81 81 FE 85 81 32 67 94 81 01 5C CB 00 CC 82 82 0A B8 0F F9 13 52 4C 13 73 5C 06 75 A1";

    //                                     1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
    
    private BSEFastFixDecoder  _decoderEMDI   = new BSEFastFixDecoder( "BSETstEMDIReader", "../data/bse/common/EMDIFastTemplates-1.1.xml", null, true, true );
    private BSEFastFixDecoder  _decoderEMDS   = new BSEFastFixDecoder( "BSETstEMDSReader", "../data/bse/common/EMDSFastTemplates-1.1.xml", null, true, true );

    private String             _dateStr = "20120403";
    private TimeZoneCalculator _calc;

    
    @Override
    public void setUp(){
        _calc = new TimeZoneCalculator();
        _calc.setDate( _dateStr );
        _decoderEMDI.setTimeZoneCalculator( _calc );
        _decoderEMDS.setTimeZoneCalculator( _calc );
    }
    
    public BSEFailedDecodeTest() {
        // nothing
    }

    public void testMsgEqDerivMDInc1() {
        doFullMsgTest( I_EQ1, _decoderEMDI, 350117 );
    }
    
    public void testIncNoHdr1() {
        doSingleMsgTest( SNAP_NO_HDR1, _decoderEMDS );
    }
    
    public void testIncNoHdr2() {
        doSingleMsgTest( INC_NO_HDR2, _decoderEMDI );
    }
    
    public void testMsgEMDI1() {
        doFullMsgTest( EMDI1, _decoderEMDI, 3273 );
    }
    
    public void testMsgEMDI2() {
        doFullMsgTest( EMDI2, _decoderEMDI, 1757911 );
    }
    
    public void testMsgEMDI3() {
        doFullMsgTest( EMDI3, _decoderEMDI, 7 );
    }

    public void testMsgEMDS1() {
        doFullMsgTest( EMDS1, _decoderEMDS, 387320 );
    }
    
    public void testMsgEMDS3() {
        doFullMsgTest( EMDS3, _decoderEMDS, 387319 );
    }

    public void testMsgEMDS4() {
        doFullMsgTest( EMDS4, _decoderEMDS, 387316 );
    }

    public void doFullMsgTest( String hexMsg, BSEFastFixDecoder decoder, int expPacketSeqNum ) {
        
        byte[] binaryMsg = HexUtils.hexStringToBytes( hexMsg );
        byte[] buf = new byte[8192];
        System.arraycopy( binaryMsg, 0, buf, 0, binaryMsg.length );
        
        int numBytes = binaryMsg.length;

        int offset = 0;
        int maxOffset = numBytes;
        
        BSEPacketHeader   curPacketHeader = decoder.getCurPacketHeader();
        
        boolean decodedHdr = decoder.decodeStartPacket( buf, offset, maxOffset );

        assertTrue( "Invalid header", decodedHdr );
        assertEquals( expPacketSeqNum, curPacketHeader._packetSeqNum );
            
        offset = decoder.getCurrentOffset();
        
        decoder.logLastMsg();

        Message msg = decoder.decode( buf, offset, maxOffset );

        assertNotNull( msg );
        
        while ( msg != null ) {

            ReusableString dump = new ReusableString();
            msg.dump( dump );
            _log.info( dump );
            
            offset = decoder.getCurrentOffset();
            
            msg = decoder.decode( buf, offset, maxOffset );
        }
    }

    public void doSingleMsgTest( String hexMsg, BSEFastFixDecoder decoder ) {
        
        byte[] binaryMsg = HexUtils.hexStringToBytes( hexMsg );
        byte[] buf = new byte[8192];
        System.arraycopy( binaryMsg, 0, buf, 0, binaryMsg.length );

        int numBytes = binaryMsg.length;

        int offset = 0;
        int maxOffset = numBytes;
        
        decoder.testStart( buf, offset, maxOffset );

        Message msg = decoder.decode( buf, offset, maxOffset );

        decoder.logLastMsg();

        assertNotNull( msg );
        
        while ( msg != null ) {

            ReusableString dump = new ReusableString();
            msg.dump( dump );
            _log.info( dump );
            
            offset = decoder.getCurrentOffset();
            
            msg = decoder.decode( buf, offset, maxOffset );
        }
    }
}

